MCQs

Q1. Collection Class For Dynamic Array

Which of these standard collection classes implements a dynamic array?

Options
This problem has only one correct answer
(a) AbstractList
(b) AbstractSet
(c) Arraylist
(d) ArrayList

Ans. (d) ArrayList ✓

/*-------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

Q2. Size Of ArrayList

Which of these method of ArrayList class is used to obtain present size of an ArrayList object?

Options
This problem has only one correct answer
(a) length()
(b) size()
(c) capacity()
(d) index()

Ans. (b) size() ✓

/*-------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

Q3. ArrayList Of Integers

Which of the following declarations would be correct for a list that will contain Integers?

Options
This problem has only one correct answer
(a) ArrayList<String> list = new ArrayList<String>() ;
(b) ArrayList<int> list = new ArrayList<int>() ;
(c) ArrayList list = new ArrayList() ;
(d) ArrayList<Integer> list = new ArrayList<Integer>() ;

Ans. (d) ArrayList<Integer> list = new ArrayList<Integer>() ; ✓

/*-------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

Q4. Figure Out Element

Consider the following code:
ArrayList<String> list = new ArrayList<String>() ;
list.add( "apple" );
list.add( "banana" );
list.add( "carrot" );
list.add( 0, "mango" );
What element will be at index 2 of the list?

Ans. banana ✓

/*-------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

Q4. Figure Out Correct Statement

Consider the following code:
ArrayList<String> list = new ArrayList<String>() ;
list.add( "Ant" );
list.add( "Bat" );
list.add( "Car" );
list.add( "Door" );
list.add( "Euro" );
Which of the following statements will replace the element "Car" with "Bus" ?

Options
This problem has only one correct answer
(a) list[2] = "Bus" ;
(b) list.add( "Bus", list.indexOf("Car") );
(c) list.set( 2, "Bus" );
(d) list.set( "Bus", "Car" );

Ans. (c) list.set( 2, "Bus" ); ✓

/*-------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

Q5. Linked List Use Case

Linked List are best suited:

Options
This problem has only one correct answer
(a) for relatively permanent collections of data.
(b) for the size of the structure is constantly changing.
(c) for random Access of elements
(d) None of these

Ans. (b) for the size of the structure is constantly changing. ✓

/*-------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

Q6. What is Output?

Consider the Node class as shown below :
public class Node<T> {
  T data;
  Node<T> next;
  Node(T data){
    this.data = data;
  }
}
Now consider following code using Node class shown above.
public  class LinkedListUse{

 public static void print(Node<Integer> head){
    Node<Integer> temp = head;

    while(temp != null){
        System.out.print(temp.data +" ");
        temp = temp.next;
    }
    System.out.println();
}

public static void main(String args[]){

    Node<Integer> node1 = new Node<Integer>(10);
    Node<Integer> node2 = new Node<Integer>(20);
    node2.next = node1;
    print(node2);
   }
}
What will be the Output ?

Options
This problem has only one correct answer
(a) 10 20
(b) 20 10
(c) Error
(d) None of these

Ans. (b) 20 10 ✓

/*-------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

Q7. Predict The Output?

Consider the Node class as shown below :
public class Node<T> {
  T data;
  Node<T> next;
  Node(T data){
    this.data = data;
  }
}
Now consider following code using Node class shown above.
public  class LinkedListUse{

 public static void print(Node<Integer> head){
    Node<Integer> temp = head;

    while(temp != null){
        System.out.print(temp.data +" ");
        temp = temp.next;
    }
    System.out.println();
}

public static void main(String args[]){

    Node<Integer> node1 = new Node<Integer>(10);
    Node<Integer> node2 = new Node<Integer>(20);
    Node<Integer> node3 = new Node<Integer>(30);
    Node<Integer> node4 = new Node<Integer>(40);
    node1.next = node2;
    node2.next = node3;
    node3.next = node4;
    print(node2);
   }
}
What will be the Output ?

Options
This problem has only one correct answer
(a) 10 20 30 40
(b) 20 30 40
(c) 30 40
(d) 10 30 40

Ans. (b) 20 30 40 ✓

/*-------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

Q8. Find Output?

Consider the Node class as shown below :
public class Node<T> {
  T data;
  Node<T> next;
  Node(T data){
    this.data = data;
  }
}
Now consider following code using Node class shown above.
public  class LinkedListUse{

 public static void print(Node<Integer> head){
    Node<Integer> temp = head;

    while(temp != null){
        System.out.print(temp.data +" ");
        temp = temp.next;
    }
    System.out.println();
}

public static void increment(Node<Integer> head){
    Node<Integer> temp = head;
    while(temp != null){
        temp.data++;
        temp = temp.next;
    }
}

public static void main(String args[]){

    Node<Integer> node1 = new Node<Integer>(10);
    Node<Integer> node2 = new Node<Integer>(20);
    node1.next = node2;
    increment(node1);
    print(node1);
   }
}
What will be the Output ?

Options
This problem has only one correct answer
(a) 10 20
(b) 11 21
(c) Error
(d) None of these

Ans. (b) 11 21 ✓

/*-------------------------------------------------------------------------------------------------------------------------------------------------------------------*/
